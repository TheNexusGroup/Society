name: Society Simulation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev
        # Install pygame dependencies for headless testing
        sudo apt-get install -y python3-pygame
        export SDL_VIDEODRIVER=dummy
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        # Install main dependencies if requirements.txt exists
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run unit tests with coverage
      run: |
        export SDL_VIDEODRIVER=dummy
        python run_tests.py --unit --verbose
    
    - name: Run integration tests
      run: |
        export SDL_VIDEODRIVER=dummy
        python run_tests.py --integration --verbose
    
    - name: Run critical issue tests
      run: |
        export SDL_VIDEODRIVER=dummy
        python run_tests.py --critical --verbose
    
    - name: Generate coverage report
      run: |
        export SDL_VIDEODRIVER=dummy
        python run_tests.py --coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          tests/test_report.json
          tests/TEST_REPORT.md
          tests/coverage_html/
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const report = fs.readFileSync('tests/TEST_REPORT.md', 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ§ª Test Results\n\n${report}`
            });
          } catch (error) {
            console.log('Could not read test report:', error.message);
          }

  stress-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-pygame
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run stress tests
      timeout-minutes: 30
      run: |
        export SDL_VIDEODRIVER=dummy
        python run_tests.py --stress --verbose
    
    - name: Upload stress test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: stress-test-results
        path: tests/test_report.json

  benchmark:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-pygame
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run benchmarks
      run: |
        export SDL_VIDEODRIVER=dummy
        python run_tests.py --benchmarks --verbose
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: github.ref == 'refs/heads/main'
      with:
        tool: 'pytest'
        output-file-path: tests/benchmark_results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: tests/benchmark_results.json